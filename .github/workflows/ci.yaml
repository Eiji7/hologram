name: CI

# Define workflow that runs when changes are pushed to the
# `master` branch or pushed to a PR branch that targets the `master`
# branch.
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Sets the ENV `MIX_ENV` to `test` for running tests
env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      # Specify the OTP and Elixir versions to use when building
      # and running the workflow steps.
      matrix:
        otp: ['24.3.2']
        elixir: ['1.13.3']
    steps:
    # Step: Setup Elixir + Erlang image as the base.
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir}}

    # Step: Check out the code.
    - name: Checkout code
      uses: actions/checkout@v3

    # Step: Define how to cache lib deps. Restores existing cache if present.
    - name: Cache lib deps
      id: cache-lib-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-elixir-lib-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-       

    # Step: Define how to cache the `_build` directory. After the first run,
    # this speeds up tests runs a lot. This includes not re-compiling our
    # project's downloaded deps every run.
    # - name: Cache compiled build
    #   id: cache-build
    #   uses: actions/cache@v3
    #   env:
    #     cache-name: cache-compiled-build
    #   with:
    #     path: |
    #       _build
    #       test/e2e/_build
    #     key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-mix-${{ env.cache-name }}-
    #       ${{ runner.os }}-mix-         

    # Step: Download lib dependencies. If unchanged, uses
    # the cached version.
    - name: Install lib dependencies
      run: mix deps.get      

    # Step: Compile the lib treating any warnings as errors.
    - name: Compiles lib without warnings
      run: mix compile --warnings-as-errors

    # Step: Check that the checked in lib code has already been formatted.
    # This step fails if something was found unformatted.
    - name: Check lib formatting
      run: mix format --check-formatted

    # Step: Execute the unit tests.
    - name: Run unit tests
      run: mix test

    # Step: Download E2E app dependencies.
    - name: Install E2E app dependencies
      run: cd test/e2e && mix deps.get        

    # Step: Compile the E2E app treating any warnings as errors.
    - name: Compiles E2E app without warnings
      run: cd test/e2e && mix compile --warnings-as-errors

    # Step: Check that the checked in E2E app code has already been formatted.
    # This step fails if something was found unformatted.
    - name: Check E2E app formatting
      run: cd test/e2e && mix format --check-formatted

    # Step: Execute the E2E tests.
    - name: Run E2E tests
      run: cd test/e2e && mix test

# debug 1