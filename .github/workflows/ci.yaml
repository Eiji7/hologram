name: CI

# Define workflow that runs when changes are pushed to the
# `master` branch or pushed to a PR branch that targets the `master`
# branch.
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

# Sets the ENV `MIX_ENV` to `test` for running tests
env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    name: Test on OTP ${{ matrix.otp }} / Elixir ${{ matrix.elixir }}
    strategy:
      # Specify the OTP and Elixir versions to use when building
      # and running the workflow steps.
      matrix:
        otp: ['26.0.2']
        elixir: ['1.15.4-otp-26']
    steps:

    # Step: Setup Elixir + Erlang image as the base.
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{ matrix.otp }}
        elixir-version: ${{ matrix.elixir }}

    # Step: Check out the code.
    - name: Checkout code
      uses: actions/checkout@v3

    # Step: Define how to cache the lib Elixir dependencies.
    - name: Cache lib Elixir deps
      id: cache-lib-elixir-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-lib-elixir-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-    

    # Step: Define how to cache test app deps. Restores existing cache if present.
    # TODO: uncomment when E2E tests are implemented
    # - name: Cache test app deps
    #   id: cache-e2e-app-deps
    #   uses: actions/cache@v3
    #   env:
    #     cache-name: cache-elixir-e2e-app-deps
    #   with:
    #     path: test/e2e/deps
    #     key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('test/e2e/mix.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-mix-${{ env.cache-name }}-             

    # Step: Define how to cache the lib Elixir build.
    - name: Cache lib Elixir build
      id: cache-lib-elixir-build
      uses: actions/cache@v3
      env:
        cache-name: cache-lib-elixir-build
      with:
        path: _build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-

    # Step: Define how to cache the test app `_build` directory. After the first run,
    # this speeds up tests runs a lot. This includes not re-compiling our
    # project's downloaded deps every run.
    # TODO: uncomment when E2E tests are implemented
    # - name: Cache test app build
    #   id: cache-e2e-app-build
    #   uses: actions/cache@v3
    #   env:
    #     cache-name: cache-elixir-e2e-app-build
    #   with:
    #     path: test/e2e/_build
    #     key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('test/e2e/mix.lock') }}
    #     restore-keys: |
    #       ${{ runner.os }}-mix-${{ env.cache-name }}-
    #       ${{ runner.os }}-mix-                 

    # Step: Download lib Elixir dependencies.
    # If unchanged, uses the cached version.
    - name: Download lib Elixir deps
      run: mix deps.get

    # Step: Download lib JavaScript dependencies.
    - name: Download lib JavaScript deps
      run: cd assets && npm install

    # Step: Check if lib mix.lock has any unused dependencies.
    - name: Check lib unused Elixir deps
      run: mix deps.unlock --check-unused
      
    # Step: Check if there are any lib Elixir dependencies which have been marked as retired.
    - name: Check lib retired Elixir deps
      run: mix hex.audit      

    # Step: Check if there are any security vulnerabilities in the lib Elixir dependencies.
    - name: Check lib security vulnerabilities in Elixir deps
      run: mix deps.audit

    # Step: Check that the lib Elixir code has already been formatted.
    - name: Check lib Elixir code formatted
      run: mix format --check-formatted

    # Step: Check that the lib JavaScript & JSON code has already been formatted.
    - name: Check lib JavaScript & JSON code formatted
      run: assets/node_modules/.bin/prettier 'assets/*.json' 'assets/js/*.mjs' 'assets/js/**/*.mjs' 'test/javascript/*.mjs' 'test/javascript/**/*.mjs' --check --config 'assets/.prettierrc.json' --no-error-on-unmatched-pattern

    # Step: Compile the lib project treating any warnings as errors.
    - name: Check lib project compiles without warnings
      run: mix compile --all-warnings --warnings-as-errors

    # Step: Check that lib doc and spec coverage are above thresholds (with Doctor).
    - name: Check lib doc and spec coverage
      run: mix doctor

    # Step: Run lib Elixir static code analysis with Credo.
    - name: Run lib Elixir static code analysis with Credo
      run: mix credo --strict

    # Step: Run lib Elixir security-focused analysis with Sobelow.
    - name: Run lib Elixir security-focused analysis with Sobelow
      run: mix sobelow --config

    # Step: Restore Dialyzer PLT cache.
    # Cache key is based on Erlang/Elixir version and the mix.lock hash.
    - name: Restore Dialyzer PLT cache
      id: restore-dialyzer-plt-cache
      uses: actions/cache/restore@v3
      with:
        key: |
          dialyzer-plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          dialyzer-plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-
        path: |
          priv/plts

    # Step: Create Dialyzer PLTs if no cache was found.
    - name: Create Dialyzer PLTs
      if: steps.restore-dialyzer-plt-cache.outputs.cache-hit != 'true'
      run: mix dialyzer --plt
      
    # Step: Save Dialyzer PLT cache.
    # By default, the GitHub Cache action will only save the cache if all steps in the job succeed,
    # so we separate the cache restore and save steps in case running dialyzer fails.
    - name: Save Dialyzer PLT cache
      id: save-dialyzer-plt-cache
      uses: actions/cache/save@v3
      if: steps.restore-dialyzer-plt-cache.outputs.cache-hit != 'true'
      with:
        key: |
          dialyzer-plt-${{ runner.os }}-${{ steps.beam.outputs.otp-version }}-${{ steps.beam.outputs.elixir-version }}-${{ hashFiles('**/mix.lock') }}
        path: |
          priv/plts      

    # Step: Run lib Elixir static code analysis with Dialyzer.
    - name: Run lib Elixir static code analysis with Dialyzer
      run: mix dialyzer --format github

    # Step: Check that all lib test scripts have valid file names.
    - name: Check lib test file names
      run: mix holo.test.check_file_names test/elixir/hologram

    # Step: Run lib JavaScript static code analysis with ESLint.
    - name: Run lib JavaScript static code analysis with ESLint
      run: mix eslint

    # Step: Execute lib Elixir unit tests.
    - name: Run lib Elixir unit tests
      run: mix test

    # Step: Execute lib JavaScript unit tests.
    - name: Run lib JavaScript unit tests
      run: mix test.js      

    # Step: Download test app dependencies.
    # TODO: uncomment when E2E tests are implemented
    # - name: Install test app dependencies
    #   run: cd test/e2e && mix deps.get        

    # Step: Compile the test app treating any warnings as errors.
    # TODO: uncomment when E2E tests are implemented
    # - name: Check test app compiles without warnings
    #   run: cd test/e2e && mix compile --warnings-as-errors

    # Step: Check that the test app code has already been formatted.
    # This step fails if something was found unformatted.
    # TODO: uncomment when E2E tests are implemented
    # - name: Check test app code formatted
    #   run: cd test/e2e && mix format --check-formatted

    # Step: Execute the E2E tests.
    # TODO: uncomment when E2E tests are implemented
    # - name: Run E2E tests
    #   run: cd test/e2e && mix test