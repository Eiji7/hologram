defmodule Hologram.Compiler.FunctionDefinitionTransformerTest do
  use Hologram.Test.UnitCase, async: true

  alias Hologram.Compiler.FunctionDefinitionTransformer

  alias Hologram.Compiler.IR.{
    AtomType,
    Binding,
    Block,
    FunctionDefinition,
    FunctionHead,
    IntegerType,
    MapAccess,
    ParamAccess,
    Variable
  }

  @code """
  def test(1, 2) do
  end
  """

  test "name" do
    ast = ast(@code)

    assert %FunctionDefinition{name: :test} = FunctionDefinitionTransformer.transform(ast)
  end

  test "arity" do
    ast = ast(@code)

    assert %FunctionDefinition{arity: 2} = FunctionDefinitionTransformer.transform(ast)
  end

  test "params" do
    code = """
    def test(a, b) do
    end
    """

    ast = ast(code)

    assert %FunctionDefinition{} = result = FunctionDefinitionTransformer.transform(ast)

    expected = [
      %Variable{name: :a},
      %Variable{name: :b}
    ]

    assert result.params == expected
  end

  test "bindings" do
    code = """
    def test(1, %{a: x, b: y}) do
    end
    """

    ast = ast(code)

    assert %FunctionDefinition{} = result = FunctionDefinitionTransformer.transform(ast)

    expected = [
      %Binding{
        name: :x,
        access_path: [
          %ParamAccess{index: 1},
          %MapAccess{key: %AtomType{value: :a}}
        ]
      },
      %Binding{
        name: :y,
        access_path: [
          %ParamAccess{index: 1},
          %MapAccess{key: %AtomType{value: :b}}
        ]
      }
    ]

    assert result.bindings == expected
  end

  test "body, single expression" do
    code = """
    def test do
      1
    end
    """

    ast = ast(code)

    assert %FunctionDefinition{} = result = FunctionDefinitionTransformer.transform(ast)

    expected = %Block{
      expressions: [
        %IntegerType{value: 1}
      ]
    }

    assert result.body == expected
  end

  test "body, multiple expressions" do
    code = """
    def test do
      1
      2
    end
    """

    ast = ast(code)

    assert %FunctionDefinition{} = result = FunctionDefinitionTransformer.transform(ast)

    expected = %Block{
      expressions: [
        %IntegerType{value: 1},
        %IntegerType{value: 2}
      ]
    }

    assert result.body == expected
  end

  test "visibility public" do
    ast = ast(@code)

    assert %FunctionDefinition{visibility: :public} = FunctionDefinitionTransformer.transform(ast)
  end

  test "visibility private" do
    code = """
    defp test(1, 2) do
    end
    """

    ast = ast(code)

    assert %FunctionDefinition{visibility: :private} =
             FunctionDefinitionTransformer.transform(ast)
  end

  test "handles function definitions generated by macros" do
    ast =
      {:def, [context: Abc.Bcd, import: Kernel],
       [
         {:route, [context: Abc.Bcd], Abc.Bcd},
         [do: {:__block__, [], ["test"]}]
       ]}

    assert %FunctionDefinition{} = FunctionDefinitionTransformer.transform(ast)
  end

  test "function head" do
    code = "def test(a, b)"
    ast = ast(code)

    assert %FunctionHead{} = FunctionDefinitionTransformer.transform(ast)
  end
end
